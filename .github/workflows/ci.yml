name: pqchat-c CI
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    env:
      OPENSSL_PREFIX: ${{ github.workspace }}/opt/openssl-3.5
    steps:
      - uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential perl git ca-certificates pkg-config patchelf

      - name: Cache OpenSSL 3.5 build
        id: cache-ossl
        uses: actions/cache@v4
        with:
          path: ${{ env.OPENSSL_PREFIX }}
          key: ossl-3.5.0-${{ runner.os }}-v1

      # ← キャッシュに頼り切らず、実体が無ければ必ずビルド
      - name: Ensure OpenSSL 3.5 installed
        run: |
          if [ ! -x "${OPENSSL_PREFIX}/bin/openssl" ]; then
            echo "OpenSSL not found; building..."
            git clone --depth=1 --branch openssl-3.5.0 https://github.com/openssl/openssl.git
            cd openssl
            ./Configure --prefix="${OPENSSL_PREFIX}" linux-x86_64
            make -j"$(nproc)"
            make install_sw
          else
            echo "OpenSSL already present:"
            "${OPENSSL_PREFIX}/bin/openssl" version -a || true
          fi

      # ← lib と modules の実在パスを自動検出（lib or lib64）
      - name: Detect OpenSSL libdir
        run: |
          set -e
          LIBDIR="${OPENSSL_PREFIX}/lib"
          if [ ! -f "${LIBDIR}/libcrypto.so.3" ]; then
            LIBDIR="$(dirname "$(find "${OPENSSL_PREFIX}" -name 'libcrypto.so.3' -print -quit)")"
          fi
          [ -n "${LIBDIR}" ] && [ -d "${LIBDIR}" ] || { echo "libdir not found"; exit 1; }
          MODDIR="${LIBDIR}/ossl-modules"
          echo "LIBDIR=${LIBDIR}"   >> "$GITHUB_ENV"
          echo "MODDIR=${MODDIR}"   >> "$GITHUB_ENV"
          echo "${OPENSSL_PREFIX}/bin" >> "$GITHUB_PATH"
          echo "LD_LIBRARY_PATH=${LIBDIR}" >> "$GITHUB_ENV"
          echo "OPENSSL_MODULES=${MODDIR}" >> "$GITHUB_ENV"
          echo "PKG_CONFIG_PATH=${LIBDIR}/pkgconfig" >> "$GITHUB_ENV"
          echo "Detected LIBDIR=$LIBDIR"
          ls -l "$LIBDIR" || true
          ls -l "$MODDIR" || true

      - name: Force RPATH on openssl
        run: |
          patchelf --set-rpath "${LIBDIR}" "${OPENSSL_PREFIX}/bin/openssl"
          ldd "${OPENSSL_PREFIX}/bin/openssl" | egrep 'ssl|crypto'

      - name: Show openssl version and groups
        run: |
          which openssl
          ldd "$(which openssl)" | egrep 'ssl|crypto'
          openssl version -a
          openssl list -tls-groups | tr '\n' ' ' | sed 's/  */ /g'

      - name: Generate test certs (ML-DSA-65)
        run: |
          OPENSSL=openssl ./scripts/gen_certs.sh

      - name: Build project
        run: |
          make clean
          make
          ldd ./server | egrep 'ssl|crypto'
          ldd ./client | egrep 'ssl|crypto'

      # （任意）自作バイナリにも RPATH を入れて更に堅くする
      - name: Force RPATH on project binaries
        run: |
          patchelf --set-rpath "${LIBDIR}" ./server
          patchelf --set-rpath "${LIBDIR}" ./client
          ldd ./server | egrep 'ssl|crypto'
          ldd ./client | egrep 'ssl|crypto'

      - name: Smoke test (self client)
        run: |
          set -e
          ./server &
          PID=$!
          sleep 1
          printf "hello\n" | ./client | tee /tmp/out.txt
          kill $PID
          grep -q "echo: hello" /tmp/out.txt

      - name: Smoke test (openssl s_client)
        run: |
          ./server &
          PID=$!
          sleep 1
          openssl s_client -connect [::1]:4433 -tls1_3 -groups MLKEM768 -CAfile cert/ca.crt </dev/null 2>&1 | tee /tmp/sclient.txt || true
          kill $PID
          grep -q "Negotiated TLS1.3 group: MLKEM768" /tmp/sclient.txt
